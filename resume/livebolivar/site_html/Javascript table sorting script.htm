<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0048)http://www.allmyscripts.com/Table_Sort/ -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "">
<HTML><!-- #BeginTemplate "/Templates/main.dwt" --><HEAD><META 
content="IE=5.0000" http-equiv="X-UA-Compatible">
 <!-- #BeginEditable "doctitle" --> 
<TITLE>Javascript table sorting script</TITLE> 
<META name="description" content="Javascript table sorting script with multi-column sort - download page, description and installation instructions">
<meta name="viewport" content="width=device-width, maximum-scale=1.0, minimum-scale=1.0, initial-scale=1.0">

        
 <!-- #EndEditable --> 
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> <LINK 
href="Javascript%20table%20sorting%20script_files/allmyscripts.css" rel="stylesheet" 
type="text/css"> 
<STYLE type="text/css">
table.demo
{
	font-size: 13px;
	border: 1px solid #0000C0;
}

table.demo th
{
	font-weight: bold;
	background-color: #C0C0FF;
	padding: 2px 5px 2px 5px;
}

table.demo td
{
	font-size: 12px;
	padding: 2px 5px 2px 5px;
/*	border-top: 1px dotted #C0C0FF;*/
}

tr.row1
{
	background-color: #FFFFFF;
}

tr.row2
{
	background-color: #E0E0FF;
}

tr.hl
{
	color: #808080;
	font-weight: bold;
}
</STYLE>
 
<META name="GENERATOR" content="MSHTML 11.00.10570.1001"></HEAD> 
<BODY text="#000000" bgcolor="#ffffff">

<!-- #BeginEditable "Body" --> 
<A href="http://www.allmyscripts.com/index.html"><IMG 
      width="100%" alt="AllMyScripts logo - first part" src="Javascript%20table%20sorting%20script_files/Logo2.gif"></A>
<DIV align="left">
<H1>Javascript Table Sorting</H1></DIV><BR>
<DIV align="center"><A 
href="http://www.allmyscripts.com/Table_Sort/#features">Features</A> | <A href="http://www.allmyscripts.com/Table_Sort/#example">Example</A> 
| <A href="http://www.allmyscripts.com/Table_Sort/#how_to_use_it">How to use 
it</A> | <A href="http://www.allmyscripts.com/Table_Sort/#advanced">Advanced 
features</A> | <A 
href="http://www.allmyscripts.com/Table_Sort/#changes">Changes</A> | <A href="http://www.allmyscripts.com/Table_Sort/#download">Download</A> 
| <A href="http://www.allmyscripts.com/Table_Sort/#license">License</A> </DIV><A 
name="features"></A> 
<H2>Features:</H2>
<P>For one of my projects I wrote simple javascript code that sorts table data. 
At some point I wanted to use the code for another website, so I've made it 
generic enough to suit different websites. Eventually I released the code under 
GPL. Since then I've made several enhancements to the code, and now the table 
sorting script has the following features: 
<UL>
  <LI>Automatically adds links to column names.</LI>
  <LI>Clicking on column name repeatedly switches sorting order to  ascending, 
  descending and unsorted (original order).   
  <LI>Displays sorting order as an up or down arrow next to the column  name. 
  The arrow character can be optionally replaced with another  character/string 
  or an image.</LI>
  <LI>Sorts column data containing plain text, HTML text (HTML is  stripped), 
  integer numbers, floating-point numbers and dates.</LI>
  <LI>Multi-column sort: The script remembers what columns were  selected before 
  and their sorting order. When the script sorts the  data in primary (currently 
  selected) column and finds that two rows  have the same column data, it uses 
  data from previously  selected columns to determine the sorting order of 
  columns.</LI>
  <LI>Multi-table support: the script can sort data in any number of  tables on 
  the page.</LI>
  <LI>It is possible to specify initial sorting order.</LI>
  <LI>Optionally saves the sorting order into cookie(s), and  automatically 
  restores sorting order after the page is  reloaded.</LI>
  <LI>Optionally applies zebra-striping to columns.</LI></UL><A 
name="example"></A> 
<H2>Example:</H2>
<P>Current sorting order of the second table is stored in a cookie. If you 
refresh the page the table will have exactly the same sorting order as it had 
before refreshing. Also, the second table has custom sorting up/down characters. 
<P>
<SCRIPT src="beta/gs_sortable.js" type="text/javascript"></SCRIPT>
 
<SCRIPT type="text/javascript">
<!--
var TSort_Data = new Array ('table_demo_world', 's', 'i', 'f');
var TSort_Classes = new Array ('row1', 'row2');
var TSort_Initial = new Array ('1A', '2D');
tsRegister();
TSort_Data = new Array ('table_demo_us', 'h', 's', 'n');
TSort_Classes = new Array ('row2', 'row1');
TSort_Initial = new Array ('0D');
var TSort_Icons = new Array (' V', ' &#923;');
var TSort_Cookie = 'table_demo_us';
tsRegister();
// -->
</SCRIPT>
 <!-- 
<table cellspacing=0 cellpadding=5 border=0>
<tr><td align=center>
--> 
<TABLE class="demo" id="table_demo_world">
  <THEAD>
  <TR>
    <TH rowspan="2">City Name</TH>
    <TH colspan="2">City Information</TH></TR>
  <TR>
    <TH>Area (km<SUP>2</SUP>)</TH>
    <TH>Population (millions)</TH></TR></THEAD>
  <TBODY>
  <TR class="row1">
    <TD>Mumbai</TD>
    <TD>440</TD>
    <TD>12.78</TD></TR>
  <TR class="row2">
    <TD>Karachi</TD>
    <TD>3530</TD>
    <TD>12.21</TD></TR>
  <TR class="row1">
    <TD>Delhi</TD>
    <TD>1400</TD>
    <TD>11.06</TD></TR>
  <TR class="row2">
    <TD>San Paulo</TD>
    <TD>1520</TD>
    <TD>10.84</TD></TR>
  <TR class="row1">
    <TD>Moscow</TD>
    <TD>1081</TD>
    <TD>10.38</TD></TR></TBODY></TABLE>
<P>
<TABLE class="demo" id="table_demo_us">
  <THEAD>
  <TR>
    <TH>US City</TH>
    <TH>State</TH>
    <TH>Population (millions)</TH></TR></THEAD>
  <TBODY>
  <TR class="row1">
    <TD><A href="http://www.allmyscripts.com/Table_Sort/index.html">New 
      York</A></TD>
    <TD>New York</TD>
    <TD>8,274,527</TD></TR>
  <TR class="row2">
    <TD><A href="http://www.allmyscripts.com/Table_Sort/index.html">Los 
      Angeles</A></TD>
    <TD>California</TD>
    <TD>3,834,340</TD></TR>
  <TR class="row1">
    <TD><A 
    href="http://www.allmyscripts.com/Table_Sort/index.html">Chicago</A></TD>
    <TD>Illinois</TD>
    <TD>2,836,658</TD></TR>
  <TR class="row2">
    <TD><A 
    href="http://www.allmyscripts.com/Table_Sort/index.html">Houston</A></TD>
    <TD>Texas</TD>
    <TD>2,208,180</TD></TR>
  <TR class="row1">
    <TD><A 
    href="http://www.allmyscripts.com/Table_Sort/index.html">Phoenix</A></TD>
    <TD>Arizona</TD>
    <TD>1,552,259</TD></TR></TBODY></TABLE><A name="how_to_use_it"></A> 
<H2>How to use it:</H2>
<OL>
  <LI>Please download a file gs_sortable.js (see links below) - this is   the 
  only external   javascript file that you will need. Put it somewhere on your 
  web server.   Do not link to original file on this server because:   
  <UL>
    <LI>You will be using my bandwidth, and I will not like it.</LI>
    <LI>I may post updated version of the javascript file with the same name,   
    and this may break your pages.</LI>
    <LI>If somebody breaks into my server it'd be easy for them to modify the   
    file and do some nasty things to your page, like getting user cookies   for 
    your domain, or redirecting all users from your page to some other   
    page.</LI></UL></LI>
  <LI>Add id="some_name" to the table that you want to sort:<BR>
  <DIV class="code">	&lt;table id="my_table"&gt;<BR>	... more HTML data ...
  	 </DIV>   "some_name" id should be unique (it's an HTML requirement).</LI>
  <LI>Put "&lt;thead&gt;" and "&lt;/thead&gt;" tags around the table row that 
  contains column names, like this:	 
  <DIV class="code">&lt;table id="my_table"&gt;<BR>&lt;thead&gt;<BR>
  &lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Year&lt;/th&gt;&lt;/tr&gt;<BR>
  &lt;/thead&gt;<BR>... table data ...<BR>&lt;/table&gt;	 </DIV>You don't 
  necessarily need to use TH tags for that row - TD will work too.</LI>
  <LI>Add javascript code to your page:	 
  <DIV class="code">&lt;script type="text/javascript" 
  src="/gs_sortable.js"&gt;&lt;/script&gt;<BR>&lt;script 
  type="text/javascript"&gt;<BR>&lt;!--<BR>var TSort_Data = new Array 
  ('my_table', 's', 'i', 'f');<BR>tsRegister();<BR>// --&gt;<BR>&lt;/script&gt;
  	 </DIV>"tsRegister();" is optional if you want the script to handle only one
   table on the page, and required if you want to add column sorting to more 
  than one table. The part that you need to change in this code is located 
  inside of Array parenthesis. The first parameter in array ("my_table" in the 
  example above) should match id of the table. All other parameters specify type 
  of data in table columns - the second parameter specifies type of data in the 
  first column, the third parameter specifies type of data in the second column, 
  and so on. "Type of data" parameters can be set to:<BR><BR><B>'i'</B> - Column 
  contains integer data. If the column data contains a number followed by text 
  then the text will ignored. For example, "54note" will be interpreted as 
  "54".<BR><BR><B>'n'</B> - Column contains integer number in which all 
  three-digit groups are optionally separated from each other by commas. For
   example, column data "100,000,000" is treated as "100000000" when type of 
  data is set to 'n', or as "100" when type of data is set to
   'i'.<BR><BR><B>'f'</B> - Column contains floating point numbers in the form
   ###.###.<BR><BR><B>'g'</B> - Column contains floating point numbers in the 
  form ###.###. Three-digit groups in the floating-point number may be separated 
  from each other by commas. For example, column data "65,432.1" is treated as 
  "65432.1" when type of data is set to 'g', or as "65" when type of data is set 
  to 'f'.<BR><BR><B>'h'</B> - column contains HTML code. The script will strip 
  all HTML code before sorting the data.<BR><BR><B>'s'</B> - column contains 
  plain text data.<BR><BR><B>'c'</B> - column contains dollar amount, prefixed 
  by '$' character. The amount may contain commas, separating three-digit 
  groups, like this: $1,234,567.89<BR><BR><B>'d'</B> - column contains a 
  date.<BR><BR><B>''</B> - do not sort the column.<BR>
  <P>It is important to note that all data types, except 's' and '', strip all
   HTML code from data columns before sorting. 
  <P>As an example of sortable table with different data types, let's pretend
   that you want to show recent sales of some equipment, and include equipment 
  name, sale date, sale price and the number of units sold. If you want to sort 
  all columns in this table, then the data type for the first column will be 's' 
  (string) or 'h' (HTML code), the second column will have 'd' (date) data type, 
  the third column will have 'c' (currency) data type, and the last column 
  should be set to data type 'i' (integer) or 'n' (a number). Assuming that the 
  table has "sortable_table" id, the javascript code will look like this:	 
  <DIV class="code">&lt;script type="text/javascript"&gt;<BR>&lt;!--<BR>var 
  TSort_Data = new Array ('sortable_table', 's', 'd', 'c', 'i');<BR>
  tsRegister();<BR>// --&gt;<BR>&lt;/script&gt;	 </DIV>
  <P>Below is an example of the table, that uses javascript code above: 
  <P>
<SCRIPT type="text/javascript">
<!--
TSort_Data = new Array ('table_demo_types', 's', 'd', 'c', 'i');
tsRegister();
// -->
</SCRIPT>
   
  <TABLE class="demo" id="table_demo_types">
    <THEAD>
    <TR>
      <TH>Product</TH>
      <TH>Date</TH>
      <TH>Price per unit</TH>
      <TH>Units sold</TH></TR></THEAD>
    <TBODY>
    <TR>
      <TD>Item A</TD>
      <TD>13/5/2012</TD>
      <TD>$25.15</TD>
      <TD>20</TD></TR>
    <TR>
      <TD>Item B</TD>
      <TD>14/5/2012</TD>
      <TD>$35</TD>
      <TD>1</TD></TR>
    <TR>
      <TD>Item A</TD>
      <TD>14/5/2012</TD>
      <TD>$28</TD>
      <TD>1</TD></TR>
    <TR>
      <TD>Item C</TD>
      <TD>15/5/2012</TD>
      <TD>$20</TD>
      <TD>100</TD></TR></TBODY></TABLE></P></LI>
  <LI>If you want to add table sort feature to more than one table on  the page 
  then repeat steps 2, 3 and 4 for each table. Make sure that  javascript code 
  in the step 4 includes "tsRegister();" statement for  each table. If you 
  specify any advanced additional parameters (see  "Advanced Features" section 
  below for more information) then you  don't need to reset them after each call 
  to the tsRegister function  - the function does it automatically.   </LI></OL>
<P>That's it. The javascript code was tested in the latest versions of IE6,
 Firefox, Chrome and Opera browsers. <A name="advanced"></A> 
<H2>Advanced Features</H2>
<UL>
  <LI>
  <H3>Setting initial sorting</H3>
  <P>You can specify initial sorting order of one or more columns in the table 
  by setting TSort_Initial variable. To sort one column in ascending order set 
  this variable to column number: 
  <DIV class="code">&lt;script type="text/javascript"&gt;<BR>&lt;!--<BR>var 
  TSort_Data = new Array ('sortable_table', '', 's', 's', 'i');<BR>var 
  TSort_Initial = 1;<BR>tsRegister();<BR>// --&gt;<BR>&lt;/script&gt; </DIV>
  Please note that the column numbering starts from 0, so setting TSort_Initial 
  to 1 will sort the second column in ascending order. You can tell the script 
  to set exact sorting order (ascending, descending or unsorted) for a column if 
  you replace the column number with a string in format 
  "&lt;column_number&gt;&lt;sorting_order&gt;", where &lt;sorting_order&gt; 
  is:<BR><BR><B>A</B> - ascending order<BR><BR><B>D</B> - descending 
  order<BR><BR><B>U</B> - unsorted<BR><BR>For example, use '1D' string to sort 
  the second column in the descending order.<BR><BR>To specify initial sorting 
  for multiple columns you'll need to set TSort_Initial variable to an array 
  containing column numbers and/or column sorting order strings: 
  <DIV class="code">&lt;script type="text/javascript"&gt;<BR>&lt;!--<BR>var 
  TSort_Data = new Array ('sortable_table', '', 's', 's', 'i');<BR>var 
  TSort_Initial = new Array (1, '2D');<BR>tsRegister();<BR>// --&gt;<BR>
  &lt;/script&gt; </DIV>In the example above the table will be sorted by the 
  second column in ascending order, and then by the third column in descending 
  order. <BR><BR></LI>
  <LI>
  <H3>Zebra striping</H3>
  <P>If you want to use different background colors for odd and even rows (zebra 
  striping) then you can tell the script to apply background colors to sorted 
  records. First, create two CSS classes with background colors for your table. 
  Then add the line below between &lt;script ...&gt; and &lt;/script&gt; tags: 
  <DIV class="code">var TSort_Classes = new Array ('class1_name', 
  'class2_name'); </DIV>
  <P>If you set initial sorting (please see "Setting initial sorting" feature 
  for more details), you can force the gs_sortable to apply zebra classes when 
  the web page is loaded. For instance, to sort the first column in ascending 
  order you will need this code: 
  <DIV class="code">var TSort_Initial = '0A'; </DIV>
  <P>By default, when Zebra striping is enabled, the script sets classes for TR 
  tags from the TSort_Classes array, wiping out whatever classes the TR tags had 
  beforehand. You can tell the script to append Zebra classes instead by setting 
  TSort_AppendClasses variable: 
  <DIV class="code">var TSort_AppendClasses = 1; </DIV>
  <P>Be warned that Zebra striping may not work correctly if the table is 
  generated with Zebra striping classes by your server script, and the
   TSort_AppendClasses variable is set. 
  <P>To demonstrate all possible Zebra striping options, let's assume that you 
  want to have even/odd zebra striping, you want to preserve highlighting of one 
  or more rows in the table, and that the table's first column by default is 
  sorted in ascending order. In this case your javascript code will look like 
  this: 
  <DIV class="code">&lt;script type="text/javascript"&gt;<BR>&lt;!--<BR>var 
  TSort_Data = new Array ('table_demo_zebra', '', 's', 's', 'i');<BR>var 
  TSort_Classes = new Array ('row1', 'row2');<BR>var TSort_AppendClasses = 1;
   var TSort_Initial = '0A'; tsRegister();<BR>// --&gt;<BR>&lt;/script&gt; 
</DIV>
  <P>Here is a sample table that uses similar javascript initialization code: 
  <P>
<SCRIPT type="text/javascript">
<!--
TSort_Data = new Array ('table_demo_zebra', 'h', 's', 'n');
TSort_Classes = new Array ('row1', 'row2');
var TSort_AppendClasses = 1;
TSort_Initial = new Array ('0A');
tsRegister();
// -->
</SCRIPT>
   
  <TABLE class="demo" id="table_demo_zebra">
    <THEAD>
    <TR>
      <TH>US City</TH>
      <TH>State</TH>
      <TH>Population (millions)</TH></TR></THEAD>
    <TBODY>
    <TR>
      <TD>Chicago</TD>
      <TD>Illinois</TD>
      <TD>2,836,658</TD></TR>
    <TR>
      <TD>Houston</TD>
      <TD>Texas</TD>
      <TD>2,208,180</TD></TR>
    <TR>
      <TD>Los Angeles</TD>
      <TD>California</TD>
      <TD>3,834,340</TD></TR>
    <TR class="hl">
      <TD>New York</TD>
      <TD>New York</TD>
      <TD>8,274,527</TD></TR>
    <TR>
      <TD>Phoenix</TD>
      <TD>Arizona</TD>
      <TD>1,552,259</TD></TR></TBODY></TABLE>
  <P>As you can see, the script automatically applies the row1/row2 classes to 
  the table when the page is loaded, as well as when the data is sorted, while 
  preserving highlighting of the row with numbers for New York city. 
  <P>The gs_sortable script may be used to do more complex zebra striping. For 
  example, if you want to use row3 class for every 4th row, and row2 class for 
  all other even rows then TSort_Classes definition will look like: 
  <DIV class="code">var TSort_Classes = new Array ('row1', 'row2', 'row1', 
  'row3');<BR></DIV><BR></LI>
  <LI>
  <H3>Sorting subset of rows</H3>
  <P>The gs_sortable script was originally designed to handle simple HTML 
  tables, that have one set of data per each row. Starting from version 1.9, the 
  gs_sortable script may work with complex tables, that utilize multiple rows to 
  display one set of data. For example, the table may show population of US 
  states, using 4 separate table rows for each state: the first row is for the 
  state population, and the following three rows are for the three largest 
  cities. One of the possible ways to sort data in such table is to sort only 
  rows with state population, and ignore all other rows with city data. At the 
  same time, the script should be smart enough to keep city data next to the row 
  with the state data, when the state row is moved around. This type of sorting 
  can be accomplished by adding hints to table rows. Specifically, all rows, 
  that shouldn't be sorted, must have "_nosort" CSS class name set: </P>
  <DIV class="code">&lt;tr class='row2'&gt;&lt;td&gt;New York 
  state&lt;/td&gt;&lt;td&gt;19,465,197&lt;/td&gt;&lt;/tr&gt;<BR>&lt;tr 
  class='_nosort'&gt;&lt;td&gt; &amp;nbsp; New York 
  City&lt;/td&gt;&lt;td&gt;8,175,133&lt;/td&gt;&lt;/tr&gt;<BR>&lt;tr 
  class='_nosort'&gt;&lt;td&gt; &amp;nbsp; 
  Buffalo&lt;/td&gt;&lt;td&gt;261,310&lt;/td&gt;&lt;/tr&gt;<BR>&lt;tr 
  class='_nosort'&gt;&lt;td&gt; &amp;nbsp; 
  Rochester&lt;/td&gt;&lt;td&gt;210,565&lt;/td&gt;&lt;/tr&gt;<BR></DIV>
  <P>All TR rows without "_nosort" class are treated as sortable, and the rows 
  with the "_nosort" class are handled as child rows, attached to their parent 
  row. In the example above, the row with New York state data is a parent row, 
  that will be sorted by the gs_sortable. Three other rows with city data are 
  moved along with the parent row when the position of the parent row changes in 
  the table. Below is an example of complex table, containing only three states: 
  <P>
<SCRIPT type="text/javascript">
<!--
var TSort_Data = new Array ('table_demo_complex', 's', 'i');
tsRegister();
// -->
</SCRIPT>
   
  <TABLE class="demo" id="table_demo_complex">
    <THEAD>
    <TR>
      <TH>State / City</TH>
      <TH>Population</TH></TR></THEAD>
    <TBODY>
    <TR class="row2">
      <TD>New Mexico</TD>
      <TD>2,082,224</TD></TR>
    <TR class="_nosort">
      <TD> &nbsp; Albuquerque</TD>
      <TD>545,852</TD></TR>
    <TR class="_nosort">
      <TD> &nbsp; Las Cruces</TD>
      <TD>97,618</TD></TR>
    <TR class="_nosort">
      <TD> &nbsp; Rio Rancho</TD>
      <TD>87,521</TD></TR>
    <TR class="row2">
      <TD>New York state</TD>
      <TD>19,465,197</TD></TR>
    <TR class="_nosort">
      <TD> &nbsp; New York City</TD>
      <TD>8,175,133</TD></TR>
    <TR class="_nosort">
      <TD> &nbsp; Buffalo</TD>
      <TD>261,310</TD></TR>
    <TR class="_nosort">
      <TD> &nbsp; Rochester</TD>
      <TD>210,565</TD></TR>
    <TR class="row2">
      <TD>North Carolina</TD>
      <TD>9,656,401</TD></TR>
    <TR class="_nosort">
      <TD> &nbsp; Charlotte</TD>
      <TD>731,424</TD></TR>
    <TR class="_nosort">
      <TD> &nbsp; Raleigh</TD>
      <TD>403,892</TD></TR>
    <TR class="_nosort">
      <TD> &nbsp; Greensboro</TD>
      <TD>269,666</TD></TR></TBODY></TABLE></P></LI>
  <LI>
  <H3>Using external buttons or objects to change sorting</H3>
  <P>To change sorting order of any column when a user clicks on a button, a 
  link, or any other object, add an onClick event to the object and call a 
  tsDraw function with either a column number or column sorting order string 
  (see "Setting initial sorting" above) as the first parameter, and id of the 
  table as the second parameter. The second parameter can be omitted if you have 
  only one table with sortable columns, or if you call tsDraw function the 
  second, the third, etc time in a row for the same table. For example, the 
  button below will change sorting order of all columns in the table at the top
   of this page to "unsorted". 
  <P>
<SCRIPT type="text/javascript">
<!--
var TSort_Data = new Array ('table_demo_ext', 's', 'i', 'f');
var TSort_Classes = new Array ('row1', 'row2');
var TSort_Initial = new Array ('0A', '1A', '2A');
tsRegister();
// -->
</SCRIPT>
   
  <TABLE class="demo" id="table_demo_ext">
    <THEAD>
    <TR>
      <TH>City</TH>
      <TH>Area (km<SUP>2</SUP>)</TH>
      <TH>Population (millions)</TH></TR></THEAD>
    <TBODY>
    <TR class="row1">
      <TD>Mumbai</TD>
      <TD>440</TD>
      <TD>12.78</TD></TR>
    <TR class="row2">
      <TD>Karachi</TD>
      <TD>3530</TD>
      <TD>12.21</TD></TR></TBODY></TABLE>
  <P><INPUT name="action" onclick='tsDraw("0U", "table_demo_ext"); tsDraw("1U"); tsDraw("2U")' type="button" value="Reset sorting"> 
  <P>Below is an HTML code for this button. Notice that only the first call to 
  tsDraw includes table id: 
  <DIV class="code">&lt;input type='button' name='action' value='Reset sorting'
   onClick='tsDraw("0U", "table_demo_world"); tsDraw("1U"); tsDraw("2U")'&gt; 
  </DIV>
  <P>The button below will sort in ascending order three columns in the table: 
  <P><INPUT name="action" onclick='tsDraw("2A", "table_demo_ext"); tsDraw("1A"); tsDraw("0A")' type="button" value="Sort all"> 
  <P>HTML code for the button: 
  <DIV class="code">&lt;input type='button' name='action' value='Sort all'
   onClick='tsDraw("2A", "table_demo_world"); tsDraw("1A"); tsDraw("0A")'&gt; 
  </DIV><BR></LI>
  <LI>
  <H3>Replacing Up/Down arrows with other characters</H3>
  <P>By default the script uses up and down arrows to indicate current sorting 
  order. You can replace these two characters with any other characters, text or 
  HTML code by setting TSort_Icons variable:  
  <DIV class="code">&lt;script type="text/javascript"&gt;<BR>&lt;!--<BR>var 
  TSort_Data = new Array ('table_demo_icons', '', 's', 'i', 'f');<BR>var 
  TSort_Icons = new Array (' (Ascending)', ' (Descending)');<BR>
  tsRegister();<BR>// --&gt;<BR>&lt;/script&gt; </DIV>
  <P>Here is an example of a table that uses javascript code above: 
  <P>
<SCRIPT type="text/javascript">
<!--
var TSort_Data = new Array ('table_demo_icons', 's', 'i', 'f');
var TSort_Icons = new Array (' (Ascending)', ' (Descending)');
tsRegister();
// -->
</SCRIPT>
   
  <TABLE class="demo" id="table_demo_icons">
    <THEAD>
    <TR>
      <TH>City</TH>
      <TH>Area (km<SUP>2</SUP>)</TH>
      <TH>Population (millions)</TH></TR></THEAD>
    <TBODY>
    <TR class="row1">
      <TD>Mumbai</TD>
      <TD>440</TD>
      <TD>12.78</TD></TR>
    <TR class="row2">
      <TD>Karachi</TD>
      <TD>3530</TD>
      <TD>12.21</TD></TR></TBODY></TABLE>
  <P>TSort_Icons parameter applies only to current table. If desired, you can 
  replace the characters / text with any HTML code, including &lt;img ...&gt; 
  tags. Be careful when you do that - the script changes text color to indicate 
  primary, secondary or tertiary column, and, if the HTML code contains just an 
  image, then it will be impossible to differentiate between primary, secondary 
  and tertiary columns.  <BR><BR></P></LI>
  <LI>
  <H3>Changing the number of sortable columns</H3>
  <P>By default, the script sorts data in the primary column (that was sorted 
  the last). All data values, that are identical in that column, are sorted 
  based on the secondary column, and if they are still identical then
   gs_sortable uses data from the tertiary column. Sometimes it is needed to 
  sort data in more than three columns at once, at other times you may need to 
  sort data only in one or two columns. You can easily adjust the number of 
  sortable columns by setting TSort_NColumns variable: 
  <DIV class="code">&lt;script type="text/javascript"&gt;<BR>&lt;!--<BR>var 
  TSort_Data = new Array ('table_demo_ncolumns', '', 's', 'i', 'f');<BR>var 
  TSort_NColumns = 1;<BR>tsRegister();<BR>// --&gt;<BR>&lt;/script&gt; </DIV>
  <P>Here is a sample table that uses javascript code above: 
  <P>
<SCRIPT type="text/javascript">
<!--
var TSort_Data = new Array ('table_demo_ncolumns', 's', 'i', 'f');
var TSort_NColumns = 1;
tsRegister();
// -->
</SCRIPT>
   
  <TABLE class="demo" id="table_demo_ncolumns">
    <TBODY>
    <TR>
      <TH>City</TH>
      <TH>Area (km<SUP>2</SUP>)</TH>
      <TH>Population (millions)</TH></TR>
    <TR class="row1">
      <TD>Mumbai</TD>
      <TD>440</TD>
      <TD>12.78</TD></TR>
    <TR class="row2">
      <TD>Karachi</TD>
      <TD>3530</TD>
      <TD>12.21</TD></TR></TBODY></TABLE><BR></P></LI>
  <LI>
  <H3>Using script with dynamically loaded tables</H3>
  <P>When a web page is loaded, the gs_sortable script automatically registers 
  and initializes all sortable tables on the page. During initialization phase, 
  the script parses table contents, and saves parsed values so that they can be 
  used at a later time without re-parsing. It also makes copies of table rows. 
  The problems arise when the page contains dynamically loaded tables, i.e. 
  tables, which contents is modified by javascript code after the page finished
   loading. The gs_sortable script does not know that the contents of the table 
  was dynamically changed, and it happily uses previously stored data to sort 
  columns' data. As a result, it may replace the contents of updated table with 
  the original contents, that existed when the page was loaded. 
  <P>Nevertheless, dynamic tables do work with the gs_sortable if they are 
  properly registered and initialized immediately after they were modified. 
  Below is an example of initialization code for dynamic table with id 
  "table_demo_dyn1": 
  <DIV class="code">&lt;script type="text/javascript"&gt;<BR>&lt;!--<BR>function 
  InitDynTable1 ()<BR>{<BR>&nbsp; TSort_Data = new Array ('table_demo_dyn1', 
  's', 'i', 'f');<BR>&nbsp; tsRegister();<BR>&nbsp; tsSetTable 
  ('table_demo_dyn1');<BR>&nbsp; tsInit();<BR>}<BR>// --&gt;<BR>&lt;/script&gt; 
  </DIV>
  <P>You may need to define TSort_Data variable if it's not defined elsewhere on 
  the page. It is recommended to implement initialization  code as a function, 
  so you can call it when needed. Below is an example of two dynamically loaded 
  tables, that use initialization function, similar to the provided one. This 
  example uses hardcoded table contents, although the same approach can be used 
  with table data, loaded by AJAX script: 
  <P>
<SCRIPT type="text/javascript">
<!--
function	LoadDynTable1 ()
{
	var obj = document.getElementById ('dynamic_table');
	if	(obj != null)
		obj.innerHTML = "<TABLE id='table_demo_dyn1' class='demo'>" +
			"<tr><th>City</th><th>Area (km<sup>2</sup>)</th><th>Population (millions)</th></tr>" +
			"<tr class='row1'><td>Mumbai</td><td>440</td><td>12.78</td></tr>" +
			"<tr class='row2'><td>Karachi</td><td>3530</td><td>12.21</td></tr>" +
			"</table>";
}

function InitDynTable1 ()
{
	TSort_Data = new Array ('table_demo_dyn1', 's', 'i', 'f');
	tsRegister();
	tsSetTable ('table_demo_dyn1');
	tsInit();
}

function	LoadDynTable2 ()
{
	var obj = document.getElementById ('dynamic_table');
	if	(obj != null)
		obj.innerHTML = "<TABLE id='table_demo_dyn2' class='demo'>" +
			"<tr><th>US City</th><th>State</th><th>Population (millions)</th></tr>" +
			"<tr class='row1'><td>New York</td><td>New York</td><td>8,274,527</td></tr>" +
			"<tr class='row2'><td>Los Angeles</td><td>California</td><td>3,834,340</td></tr>" +
			"<tr class='row1'><td>Phoenix</td><td>Arizona</td><td>1,552,259</td></tr>" +
			"</table>";
}

function InitDynTable2 ()
{
	TSort_Data = new Array ('table_demo_dyn2', 's', 's', 'i');
	tsRegister();
	tsSetTable ('table_demo_dyn2');
	tsInit();
}
// -->
</SCRIPT>
   
<INPUT name="ACTION" onClick="LoadDynTable1(); InitDynTable1()" type="button" value="Load table 1"> 
<INPUT name="ACTION" onClick="LoadDynTable2(); InitDynTable2()" type="button" value="Load table 2"> 
  <DIV id="dynamic_table"></DIV><BR></LI>
  <LI>
  <H3>Storing sorting order in a cookie</H3>
  <P>By default, the script does not preserve current sorting order when the 
  page reloads, or when a visitor leaves the page and returns to it later. You 
  can tell the script to preserve sorting order for any table on the page by 
  setting TSort_Cookie variable to cookie name, preferably the same as table id: 
   
  <DIV class="code">&lt;script type="text/javascript"&gt;<BR>&lt;!--<BR>var 
  TSort_Data = new Array ('sortable_table', '', 's', 'i', 'f');<BR>var 
  TSort_Cookie = 'sortable_table';<BR>tsRegister();<BR>// --&gt;<BR>
  &lt;/script&gt; </DIV>
  <P> Using the same name for table id and cookie name is not a requirement, if 
  you wish you give the cookie any name. If you use gs_sortable script to sort 
  data in multiple tables on the same page and you want to preserve sorting 
  order for all tables then you will need to set TSort_Cookie variable for each 
  of those tables. Make sure that cookie names for all those tables are 
  different! </P></LI></UL><A name="changes"></A> 
<H2>Changes from version 1.8</H2>
<UL>
  <LI> It is now possible to sort only a subset of rows in the table body, while 
  keeping the rest of the rows "attached" to those sortable rows. When the 
  position of the sortable row is changed in the table, all "attached" rows are 
  automatically moved together with it.</LI>
  <LI> "Zebra striping" feature in the old version of the script replaced any 
  CSS classes, assigned to TR rows. I added an option to append Zebra striping 
  classes to existing TR classes.</LI>
  <LI> You can change the number of columns, sorted by the script, from 3 to any 
  other number, by setting TSort_NColumns variable.</LI>
  <LI> It is no longer necessary to define table header (THEAD) tag. If this tag 
  is missing, the script will create table header, and move all rows with TH 
  tags there. Be aware that after the move the rows will be displayed at the top 
  of the table, therefore this functionality is only useful for simple tables, 
  that have one or several rows with TH tags at the top, and all remaining rows 
  have only TD tags.</LI>
  <LI> Before sorting, the script now strips all HTML code for all data types,
   but 's'. If you used non-'s' data types to sort data with HTML code, please 
  change the data type to 's'.</LI>
  <LI> gs_sortable now properly sorts columns with dates in cases, when cells in 
  the columns contain blank data, or when some cells are missing due to 
  insufficient number of cells in the row.</LI></UL>
<P>Some of the changes and fixes were submitted by Vilem Marsik and Andrey 
Elistratov. Thank you!  
<P>Version 1.9 of the script is backwards compatible with older versions of the 
script. Replacing old versions of the script with the version 1.9 should not 
require any changes to HTML pages. 
<H2>Changes from version 1.7</H2>
<P>The script can handle US currency in the form $XXX.XX. 
<P>Tables without rows no longer result in javascript error. This change
 incorporates fix supplied by David Sacker. 
<P>Version 1.8 of the script is backwards compatible with older versions of the 
script. Replacing old versions of the script with the version 1.8 doesn't 
require any changes to HTML pages. 
<H2>Changes from version 1.6</H2>
<P>The script now handles dates in the following formats:
&lt; year&gt;-&lt;month&gt;-&lt;day&gt; and
&lt; year&gt;-&lt;month&gt;-&lt;day&gt; 
&lt;hours&gt;:&lt;minutes&gt;:&lt;seconds&gt;. 
<P>Version 1.7 of the script is backwards compatible with older versions of the 
script. Replacing old versions of the script with the version 1.7 doesn't 
require any changes to HTML pages. 
<H2>Changes from version 1.5</H2>
<P>The script now properly handles tables that have two header rows. For an 
example please see the first demo table on this page. 
<P>Version 1.6 of the script is backwards compatible with older versions of the 
script. Replacing old versions of the script with the version 1.6 doesn't 
require any changes to HTML pages. 
<H2>Changes from version 1.4</H2>
<P>The script can now sort integer and floating-point data where three-digit
 groups are separated by commas ('n' and 'g' data type parameters). 
<P>Version 1.5 of the script is compatible with older versions of the script. 
You can replace old version of the script with the version 1.5 without changing 
your HTML pages. 
<H2>Changes from version 1.3</H2>
<UL>
  <LI> The script now supports multiple tables.</LI>
  <LI> Added sorting by date.</LI>
  <LI> Sorting order can be optionally stored in a cookie, and restored when a 
  visitor returns to the page later.</LI>
  <LI> Up/Down arrows can be optionally changed to different character or 
  image.</LI></UL>
<P>Version 1.4 of the script is compatible with older versions of the script. 
You can replace old version of the script with the version 1.4 without changing 
your HTML pages. 
<H2>Changes from version 1.2</H2>
<UL>
  <LI>You can specify exact sorting order for one or more columns.</LI>
  <LI>Added "HTML code" data type.</LI>
  <LI>Fixed a bug where a script wouldn't start at all.</LI></UL>
<P>Version 1.3 of the script is compatible with older versions of the script. 
You can replace old version of the script with the version 1.3 without changing 
your HTML pages. 
<H2>Changes from version 1.1</H2>
<P>You can specify initial sorting order of the columns in the version 1.2. 
<P>Version 1.2 of the script is directly compatible with versions 1.1 and 1.0. 
You can replace old version of the script with the new version without changing 
your HTML pages. You will need to make a small change in HTML pages if you want 
to add support for setting initial sorting order. 
<H2>Changes from version 1.0</H2>
<UL>
  <LI> You can switch columns back to unsorted order. The first click on any 
  unsorted column header sorts the data in ascending order, the second click 
  makes it sort in descending order, and the third click now switches the column 
  to unsorted order.</LI>
  <LI> You can tell the script to apply zebra striping to sorted records.</LI>
  <LI>Identical data in sorted columns is now displayed in the same order as it 
  was supplied in the HTML document.</LI></UL>
<P>Version 1.1 of the script is directly compatible with version 1.0. You can 
replace old version of the script with the new version without changing your 
HTML pages. You will need to make a small change in HTML pages if you want to 
add support for table zebra striping. <A name="download"></A> 
<H2>Download:</H2>
<P><A 
href="http://www.allmyscripts.com/Table_Sort/beta/gs_sortable.js">gs_sortable.js 
v1.9</A> (beta version) - uncompressed file<BR><A href="http://www.allmyscripts.com/Table_Sort/gs_sortable.js">gs_sortable.js 
v1.8</A> (latest stable version) - uncompressed file<BR><A href="http://www.allmyscripts.com/Table_Sort/gs_sortable.1.7.js">gs_sortable.js 
v1.7</A> - uncompressed file<BR><A href="http://www.allmyscripts.com/Table_Sort/gs_sortable.1.6.js">gs_sortable.js 
v1.6</A> - uncompressed file<BR><A href="http://www.allmyscripts.com/Table_Sort/gs_sortable.1.5.js">gs_sortable.js 
v1.5</A> - uncompressed file<BR><A href="http://www.allmyscripts.com/Table_Sort/gs_sortable.1.4.js">gs_sortable.js 
v1.4</A> - uncompressed file<BR><A href="http://www.allmyscripts.com/Table_Sort/gs_sortable.1.3.js">gs_sortable.js 
v1.3</A> - uncompressed file<BR><A href="http://www.allmyscripts.com/Table_Sort/gs_sortable.1.2.js">gs_sortable.js 
v1.2</A> - uncompressed file 
<H2>Future enhancements:</H2>
<P>None planned. <A name="license"></A> 
<H2>License:</H2>
<P>The script is released under <A href="http://www.allmyscripts.com/Table_Sort/gpl.txt">GPL 
v3.0 license</A>. You're welcome to distribute the script and to use it on your 
web pages if you like. If you decide to modify it please make sure that you 
release the changed code. </P>
<H2>Contact</H2>
<P>If you have any questions, corrections or additions to the code, you can 
contact me using <A href="http://www.allmyscripts.com/cgi-bin/GSfb.pl" target="_blank">this 
form</A>. </P>
<H2>Spread the word:</H2>
<P>If you use this script and like it please consider adding a link to this
 page. This will make it easier for other people to find this script. And the 
more people use the script the more I'll be inclined to improve it. </P><!-- #EndEditable --> 

<TABLE width="100%" class="AMS_data" border="0" cellspacing="0" 
  cellpadding="0"><TBODY>
  <TR>
    <TD height="5" bgcolor="#0000ff"><IMG width="1" height="1" alt="" src="Javascript%20table%20sorting%20script_files/blank.gif"></TD></TR>
  <TR>
    <TD align="right"><FONT color="#606060" size="1">(c) Copyright 2007 - 2009 
           Gennadiy Shvets</FONT></TD></TR></TBODY></TABLE></BODY><!-- #EndTemplate --></HTML>
